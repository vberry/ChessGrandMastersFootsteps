import os
import uuid
from flask import Blueprint, render_template, request, jsonify, make_response
from app.controllers.game_controller import GameController
from app.utils.pgn_utils import get_pgn_games, load_pgn_file
from app.models.game_model import ChessGame
from app.models.game_modelNormal import ChessGameNormal
from app.models.game_modelEasy import ChessGameEasy
from app.models.game_model1min import ChessGame1Min
from app.models.game_model3min import ChessGame3Min  
from app.models.game_model30sec import ChessGame30sec

game_bp = Blueprint("game", __name__)

# Stockage des parties en cours
games = {}

# D√©finir le dossier contenant les fichiers PGN
pgn_dir = os.path.join(os.path.dirname(__file__), "..", "dossierPgn")  # üìÇ Adapte ce chemin si n√©cessaire

# ‚úÖ Route pour la page d'accueil
@game_bp.route("/", methods=["GET"])
def home():
    """
    Route principale de l'application ‚Äî Affiche la page d'accueil.

    Cette fonction est li√©e √† la route ¬´ `/` ¬ª de l'application Flask, et elle est appel√©e
    lorsqu'un utilisateur acc√®de √† la page d‚Äôaccueil.

    Elle sert √† r√©cup√©rer et afficher la liste des parties d‚Äô√©checs disponibles (au format PGN)
    en les passant √† un template HTML.

    ###√âtapes effectu√©es par la fonction :

    1. **Appel √† `get_pgn_games()`** : Cette fonction r√©cup√®re tous les fichiers PGN disponibles dans un r√©pertoire.
    2. **Affichage du menu** : La fonction utilise `render_template()` pour afficher la page `menu.html`
       en lui passant la variable `pgn_games`.

    ###Param√®tres :

        Aucun param√®tre direct, mais fonctionne en r√©ponse √† une requ√™te HTTP GET.

    ###Retourne :

        flask.Response : Le rendu HTML de la page `menu.html`, incluant la liste des parties PGN.

    ###Utilit√© :

        - Sert de point d‚Äôentr√©e principal √† l'application.
        - Permet √† l'utilisateur de choisir une partie PGN √† analyser ou √† jouer.
        - Interface intuitive pour d√©marrer une session de jeu ou d‚Äôapprentissage.
    """
    pgn_games = get_pgn_games() 
    return render_template("menu.html", pgn_games=pgn_games)


@game_bp.route("/start-game", methods=["POST"])
def start_game():
    """
    D√©marre une nouvelle partie d'√©checs √† partir d'un fichier PGN et des pr√©f√©rences de l'utilisateur.

    Cette route est appel√©e lorsqu'un utilisateur soumet le formulaire de s√©lection de partie et de couleur
    via la m√©thode POST (depuis la page d‚Äôaccueil, par exemple).

    Elle permet d'initialiser une nouvelle instance de partie, de configurer le contr√¥leur de jeu, et
    de charger l'√©tat initial sur l‚Äôinterface `deviner_prochain_coup.html`.

    ###√âtapes effectu√©es par la fonction :

    1. **R√©cup√©ration des param√®tres du formulaire** :

        - `game_file` : Le fichier PGN choisi par l'utilisateur.
        - `user_side` : La couleur s√©lectionn√©e (`white` ou `black`).
    2. **Cr√©ation d'un identifiant unique de partie** : Bas√© sur la taille actuelle du dictionnaire `games`.
    3. **Chargement du fichier PGN** : Le fichier PGN est lu et transform√© en objet jeu.
    4. **Initialisation du contr√¥leur de jeu** : Une instance `GameController` est cr√©√©e pour g√©rer la logique.
    5. **D√©marrage de la partie** : La m√©thode `start_game()` du contr√¥leur est appel√©e.
    6. **Stockage de l'instance du jeu** : Une instance de `ChessGame` est enregistr√©e dans le dictionnaire global `games`.
    7. **Rendu HTML** : La vue `deviner_prochain_coup.html` est rendue avec l‚Äô√©tat initial du jeu.

    ###Param√®tres :

        Aucun en param√®tre direct Python, mais r√©cup√®re deux champs via `request.form` :
        - **game_file** (str) : Nom du fichier PGN s√©lectionn√©.
        - **user_side** (str) : Couleur choisie par l‚Äôutilisateur (`white` ou `black`).

    ###Retourne :

        flask.Response : La page HTML `deviner_prochain_coup.html` affichant le premier √©tat de la partie.

    ###Utilit√© :

        - Initialise dynamiquement une nouvelle session de jeu selon le choix utilisateur.
        - Relie les composants du backend (fichier PGN, logique de partie, interface utilisateur).
        - Point de d√©part interactif du jeu o√π le joueur va commencer √† deviner les coups.
    """
    game_file = request.form.get("game_file")
    user_side = request.form.get("user_side")
    game_mode = request.form.get("game_mode", "lives")  # Mode par d√©faut: vies
    # Cr√©ation d'un identifiant unique pour la partie
    # game_id = str(len(games) + 1)
    game_id = str(uuid.uuid4())


    game = load_pgn_file(os.path.join(pgn_dir, game_file))
    
    # Initialiser le contr√¥leur de jeu
    game_controller = GameController(game, user_side)
    game_controller.start_game()
    print(user_side)
    
    # S√©lectionner la classe de jeu et le template en fonction du mode et de la difficult√©
    if game_mode == "lives":
        difficulty = request.form.get("difficulty", "normal")  # Difficult√© pour le mode vies
        if difficulty == "easy":
            games[game_id] = ChessGameEasy(game, user_side, game_id=game_id)
            template = "deviner_prochain_coup_easy.html"
        elif difficulty == "normal":
            games[game_id] = ChessGameNormal(game, user_side, game_id=game_id)
            template = "deviner_prochain_coup.html"  # Use the "hard" template for normal difficulty
        else:  # "hard" by default
            games[game_id] = ChessGame(game, user_side, game_id=game_id)
            template = "deviner_prochain_coup.html"
    elif game_mode == "timer":
        timer_difficulty = request.form.get("timer_difficulty", "normal")  # Difficult√© pour le mode timer
        if timer_difficulty == "easy":
            games[game_id] = ChessGame3Min(game, user_side, game_id=game_id)  # Nouveau mode 3 minutes
            template = "game_timer_3min.html"
        elif timer_difficulty == "normal":
            games[game_id] = ChessGame1Min(game, user_side, game_id=game_id)  # Classe de jeu avec timer de 1 minute
            template = "game_timer_1min.html"
        else:  # "hard" par d√©faut (30 secondes)
            games[game_id] = ChessGame30sec(game, user_side, game_id=game_id)  # Classe de jeu avec timer de 30 secondes
            template = "game_timer_hard.html"
    # Si le mode n'est pas reconnu, utilisez le mode vies par d√©faut
    else:
        games[game_id] = ChessGameNormal(game, user_side, game_id=game_id)
        template = "game_lives.html"
    
    # √Ä la fin, utilisez cette approche simplifi√©e
    rendered_template = render_template(template, game_id=game_id, game_state=games[game_id].get_game_state())
    resp = make_response(rendered_template)
    resp.set_cookie('current_game_id', game_id, max_age=3600)
    return resp


@game_bp.route("/submit-move", methods=["POST"])
def submit_move():

    """
    Soumet un coup jou√© par l'utilisateur et retourne le r√©sultat au format JSON.

    Cette route est d√©clench√©e lorsqu‚Äôun joueur entre un coup sur l‚Äôinterface 
    (par exemple dans un champ de texte ou en cliquant sur une case).  
    Elle va appeler la logique du jeu pour valider et traiter ce coup, 
    puis renvoyer les informations actualis√©es de la partie √† afficher dans l‚Äôinterface.

    ###√âtapes effectu√©es par la fonction :
    
    1. **R√©cup√©ration des donn√©es POST** :
        - `game_id` : identifiant de la partie en cours.
        - `move` : le coup soumis par le joueur (au format UCI ou personnalis√© selon ton syst√®me).
    
    2. **V√©rification de l'existence de la partie** :
        - On tente de retrouver l'objet `ChessGame` associ√© √† `game_id` dans le dictionnaire `games`.
        - Si aucun jeu n‚Äôest trouv√©, on retourne une erreur JSON.

    3. **Soumission du coup** :
        - Le coup est pass√© √† la m√©thode `submit_move()` de la classe `ChessGame`, 
          qui renvoie un dictionnaire de r√©sultats : validit√©, points, messages, FEN, etc.

    4. **Compatibilit√© frontend** :
        - Si le r√©sultat contient la cl√© `attempts_left`, elle est renomm√©e en `remaining_attempts` 
          pour s‚Äôadapter au nom utilis√© c√¥t√© JavaScript.

    ###Retourne :

        `jsonify(result)` : Un objet JSON contenant :
        - `is_correct` : si le coup est bon.
        - `score`, `board_fen`, `move_quality`, etc.
        - `error` : message d'erreur en cas de probl√®me.
        - `remaining_attempts` : tentatives restantes si applicable.

    ###Utilit√© :

    - C≈ìur de l‚Äôinteraction utilisateur ‚Üí permet d‚Äô√©valuer et r√©agir au coup soumis.
    - G√®re la logique de feedback p√©dagogique (qualit√© du coup, aide, points...).
    - G√®re la continuit√© de la partie (√©volution de l‚Äô√©chiquier et passage au coup suivant).
    """

    game_id = request.form.get('game_id')
    move = request.form.get('move')
    
    # R√©cup√©rer le jeu depuis la session
    game = games.get(game_id)
    if not game:
        return jsonify({'error': 'Jeu non trouv√©'})
    
    # Soumettre le coup
    result = game.submit_move(move)
    
    # Transformer attempts_left en remaining_attempts pour la coh√©rence avec le frontend
    if 'attempts_left' in result:
        result['remaining_attempts'] = result['attempts_left']
        del result['attempts_left']
    
    return jsonify(result)